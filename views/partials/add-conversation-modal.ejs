<div class="modal-wrapper" id="add-conversation-modal">
    <div class="modal">
        <a onclick="closeModal()" class="modal-close">+</a>
        <div class="modal-title">
            <h2>Create New Conversation</h2>
        </div>
        <div class="modal-body">
            <form id="add-conversation-form">
                <input
                    type="text"
                    placeholder="search user by name or email or mobile"
                    name="user"
                    id="user"
                    autocomplete="off"
                />
                <p class="error"></p>
                <div class="search_users"></div>
                <input type="submit" value="Submit" class="hide" />
            </form>
        </div>
    </div>
</div>

<script>
    const modal = document.querySelector('#add-conversation-modal');
    //typig detector
    let typingTimer;
    const doneTypinginterval = 500;
    const input = document.querySelector('input#user');
    const conversation_list = document.querySelector('#conversation-list');
    let users_placeholder = document.querySelector('.search_users');

    //conversation created failure toast
    const conversationFailureToast = Toastify({
        text: 'Error in creating conversation',
        duration: 1000,
    });

    //modal close
    function closeModal() {
        modal.style.display = 'none';
        //reset
        users_placeholder.style.display = 'none';
        input.value = '';
    }
    //modal open
    function openModal() {
        modal.style.display = 'block';
    }
    //on keyup listen, start the countdown
    input.addEventListener('keyup', function () {
        clearTimeOut(typingTimer);
        //reset
        users_placeholder.style.display = 'none';

        if (input.value) {
            typingTimer = setTimeout(searchUsers, doneTypingInterval); //user is "finished typing,"send search request
        }
    });
    //on keydown, clear the countdown
    input.addEventListener('keydown', function () {
        clearTimeout(typingTimer);
    });

    //send request for search
    async function searchUsers() {
        let response = await fetch('/inbox/search', {
            method: 'POST',
            body: JSON.stringify({
                user: input.value,
            }),
            headers: {
                'Content-type': 'application/json; charset=UTF-8',
            },
        });

        //get response
        let result = await response.json();

        //handle error and response'
        if (result.errors) {
            const errorPlaceholder = document.querySelector('p.error');
            errorPlaceholder.textContent = result.errors.common.msg;
            errorPlaceholder.style.display = 'block';
        } else {
            if (result.length > 0) {
                let generatedHrtml = '<ul>';
                result.forEaach((user) => {
                    const avatar = user.avatar
                        ? './uploads/avatars/' + user.avatar
                        : './images/nophoto.png';

                    generatedHrtml += `<li onclick= "createConversation('${user._id}','${user.name}','${user.avatar}')">
                        <div class = "user">
                            <div class="avatar">
                                <img src="${avatar}" />
                                </div>
                                <div class="username">${user.name}</div>
                                </div>
                                </li>`;
                });
                generatedHrtml += '</ul>';
                users_placeholder.innerHTML = generatedHrtml;
                users_placeholder.stye.display = 'block';
            }
        }
    }
    //create Conversation
    async function createConversation(participant_id, name, avatar) {
        try {
            const response = await fetch('/inbox/conversation', {
                method: 'POST',
                body: JSON.stringify({
                    participant: name,
                    id: participant_id,
                    avatar: avatar != 'undefined' ? avatar : null,
                }),
                headers: {
                    'Content-type': 'application/json; charset=UTF-8',
                },
            });
            const result = response.json();

            if (!result.errors) {
                //reset
                users_placeholder.style.display = 'none';
                input.value = name;
                //reload the page after 1 second
                setTimeout(() => {
                    location.reload();
                }, 1000);
            } else {
                throw new error(result.error.common.msg);
            }
        } catch (err) {
            conversationFailureToast.showToast();
        }
    }
</script>
